{"version":3,"sources":["components/node.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["initialElements","id","type","data","label","position","x","y","animated","MindNode","useState","elements","setElements","name","setName","nodeBg","setNodeBg","useEffect","map","el","style","backgroundColor","background","width","height","onLoad","reactFlowInstance","fitView","onConnect","params","e","addEdge","connectionLineType","connectionLineStyle","stroke","strokeWidth","snapToGrid","snapGrid","color","gap","nodeStrokeColor","n","onChange","target","value","placeholder","className","evt","onClick","concat","length","toString","Math","random","window","innerWidth","innerHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAIMA,EAAkB,CACpB,CACIC,GAAI,IACJC,KAAM,QACNC,KAAK,CACDC,MAAQ,QAEZC,SAAS,CACLC,EAAE,EACFC,EAAE,GAENC,UAAU,IA2FHC,EAvFE,WAEb,MAAgCC,mBAASV,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEA,EAA4BJ,mBAAS,QAArC,mBAAOK,EAAP,KAAeC,EAAf,KAwBAC,qBAAU,WACNL,GAAY,SAACZ,GAAD,OACZA,EAAgBkB,KAAI,SAACC,GAKjB,MAJe,KAAXA,EAAGlB,KACLkB,EAAGC,MAAH,2BAAgBD,EAAGC,OAAnB,IAA0BC,gBAAiBN,KAGtCI,UAGV,CAACJ,EAAQH,IAId,OACI,eAAC,WAAD,WACG,eAAC,IAAD,CACKD,SAAUA,EACVS,MAnCE,CACVE,WAAY,MACZC,MAAO,OACPC,OAAQ,QAiCAC,OAxCG,SAACC,GACZA,EAAkBC,WAwCVC,UARM,SAACC,GAAD,OAAYjB,GAAY,SAACkB,GAAD,OAAOC,YAAQF,EAAQC,OASrDE,mBAAoB,SACpBC,oBAAqB,CAACC,OAAQ,OAAQC,YAAY,GAClDC,YAAY,EACZC,SAAU,CAAC,GAAI,IARpB,gBASS,cAAC,IAAD,CACIjB,MAAO,CAACE,WAAY,QACpBgB,MAAM,OACNC,IAAK,KAEb,cAAC,IAAD,CACAC,gBAAiB,SAACC,GAAO,IAAD,EACtB,iBAAIA,EAAErB,aAAN,aAAI,EAASE,YAAmBmB,EAAErB,MAAME,WACzB,UAAXmB,EAAEvC,KAAyB,UAChB,WAAXuC,EAAEvC,KAA0B,UACjB,YAAXuC,EAAEvC,KAA2B,UAE1B,UAET,cAAC,IAAD,OAEJ,gCACI,uBACIA,KAAK,OACLW,KAAK,QACL6B,SAAU,SAACZ,GAAD,OAAOhB,EAAQgB,EAAEa,OAAOC,QAClCC,YAAY,aAEf,uBAAOC,UAAU,sBAAjB,yBACG,uBAAOF,MAAO7B,EAAQ2B,SAAU,SAACK,GAAD,OAAS/B,EAAU+B,EAAIJ,OAAOC,UAClE,wBAAQ1C,KAAK,SAAS8C,QA7DlB,WACZpC,GAAY,SAACkB,GAAD,OAAOA,EAAEmB,OAAO,CACxBhD,IAAK6B,EAAEoB,OAAS,GAAGC,WACnBhD,KAAM,CAACC,MAAM,GAAD,OAAKS,IACjBR,SAAS,CACLC,EAAG8C,KAAKC,SAAWC,OAAOC,WAC1BhD,EAAG6C,KAAKC,SAAWC,OAAOE,mBAuD1B,6B,MCvFDC,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCMSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cbf9f692.chunk.js","sourcesContent":["import React,{useState,useEffect, Fragment} from 'react'\r\nimport ReactFlow, {addEdge, Background, Controls, MiniMap} from 'react-flow-renderer'\r\n\r\n\r\nconst initialElements = [\r\n    {\r\n        id: '1',\r\n        type: 'input',\r\n        data:{\r\n            label:  'Node'\r\n        },\r\n        position:{\r\n            x:0,\r\n            y:0\r\n        },\r\n        animated: true,\r\n    }\r\n]\r\n\r\nconst MindNode = () =>{\r\n\r\n    const [elements, setElements] = useState(initialElements)\r\n    const [name, setName] = useState('')\r\n\r\n    const [nodeBg, setNodeBg] = useState('#eee')\r\n\r\n\r\n    const onLoad = (reactFlowInstance) =>{\r\n        reactFlowInstance.fitView()\r\n    }\r\n\r\n    const style = {\r\n        background: 'red',\r\n        width: '100%',\r\n        height: '95vh',\r\n      }\r\n\r\n    const addNode = () =>{\r\n        setElements((e) => e.concat({\r\n            id: (e.length + 1).toString(),\r\n            data: {label: `${name}`},\r\n            position:{\r\n                x: Math.random() * window.innerWidth,\r\n                y: Math.random() * window.innerHeight,\r\n            },\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setElements((initialElements) =>\r\n        initialElements.map((el) => {\r\n            if (el.id  !== '') {\r\n              el.style = { ...el.style, backgroundColor: nodeBg }\r\n            }\r\n    \r\n            return el\r\n          })\r\n        )\r\n      }, [nodeBg, setElements ])\r\n\r\n    const onConnect = (params) => setElements((e) => addEdge(params, e))\r\n\r\n    return(\r\n        <Fragment >\r\n           <ReactFlow \r\n                elements={elements} \r\n                style={style}\r\n                onLoad={onLoad}\r\n                onConnect={onConnect}\r\n                connectionLineType= 'bezier'\r\n                connectionLineStyle={{stroke: '#333', strokeWidth:3}}\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n                >   <Background\r\n                        style={{background: '#eee'}} \r\n                        color='#888'\r\n                        gap={16}\r\n                    />\r\n                <MiniMap\r\n                nodeStrokeColor={(n) => {\r\n                  if (n.style?.background) return n.style.background;\r\n                  if (n.type === 'input') return '#0041d0';\r\n                  if (n.type === 'output') return '#ff0072';\r\n                  if (n.type === 'default') return '#1a192b';\r\n        \r\n                  return '#eee';\r\n                }}/>\r\n                <Controls  />\r\n            </ReactFlow>\r\n            <div >\r\n                <input \r\n                    type=\"text\"  \r\n                    name=\"title\"\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    placeholder=\"Add Node\"\r\n                />\r\n                 <label className=\"updatenode__bglabel\">background:</label>\r\n                    <input value={nodeBg} onChange={(evt) => setNodeBg(evt.target.value)} />\r\n                <button type=\"button\" onClick={addNode}>\r\n                    Add Node\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MindNode","import MindNode from './components/node.component'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MindNode />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}